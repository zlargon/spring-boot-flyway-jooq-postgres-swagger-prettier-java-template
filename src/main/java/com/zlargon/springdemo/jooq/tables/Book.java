/*
 * This file is generated by jOOQ.
 */
package com.zlargon.springdemo.jooq.tables;

import com.zlargon.springdemo.jooq.Keys;
import com.zlargon.springdemo.jooq.SpringDemo;
import com.zlargon.springdemo.jooq.tables.records.BookRecord;
import java.util.function.Function;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Book extends TableImpl<BookRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>spring_demo.book</code>
   */
  public static final Book BOOK = new Book();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<BookRecord> getRecordType() {
    return BookRecord.class;
  }

  /**
   * The column <code>spring_demo.book.id</code>.
   */
  public final TableField<BookRecord, Integer> ID = createField(
    DSL.name("id"),
    SQLDataType.INTEGER.nullable(false).identity(true),
    this,
    ""
  );

  /**
   * The column <code>spring_demo.book.title</code>.
   */
  public final TableField<BookRecord, String> TITLE = createField(
    DSL.name("title"),
    SQLDataType.CLOB.nullable(false),
    this,
    ""
  );

  private Book(Name alias, Table<BookRecord> aliased) {
    this(alias, aliased, null);
  }

  private Book(Name alias, Table<BookRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
  }

  /**
   * Create an aliased <code>spring_demo.book</code> table reference
   */
  public Book(String alias) {
    this(DSL.name(alias), BOOK);
  }

  /**
   * Create an aliased <code>spring_demo.book</code> table reference
   */
  public Book(Name alias) {
    this(alias, BOOK);
  }

  /**
   * Create a <code>spring_demo.book</code> table reference
   */
  public Book() {
    this(DSL.name("book"), null);
  }

  public <O extends Record> Book(Table<O> child, ForeignKey<O, BookRecord> key) {
    super(child, key, BOOK);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : SpringDemo.SPRING_DEMO;
  }

  @Override
  public Identity<BookRecord, Integer> getIdentity() {
    return (Identity<BookRecord, Integer>) super.getIdentity();
  }

  @Override
  public UniqueKey<BookRecord> getPrimaryKey() {
    return Keys.BOOK_PKEY;
  }

  @Override
  public Book as(String alias) {
    return new Book(DSL.name(alias), this);
  }

  @Override
  public Book as(Name alias) {
    return new Book(alias, this);
  }

  @Override
  public Book as(Table<?> alias) {
    return new Book(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public Book rename(String name) {
    return new Book(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Book rename(Name name) {
    return new Book(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public Book rename(Table<?> name) {
    return new Book(name.getQualifiedName(), null);
  }

  // -------------------------------------------------------------------------
  // Row2 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row2<Integer, String> fieldsRow() {
    return (Row2) super.fieldsRow();
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
   */
  public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
    return convertFrom(Records.mapping(from));
  }

  /**
   * Convenience mapping calling {@link SelectField#convertFrom(Class,
   * Function)}.
   */
  public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
    return convertFrom(toType, Records.mapping(from));
  }
}
